/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ResortIDSeasonsBody;
import io.swagger.model.ResortSkiers;
import io.swagger.model.ResortsList;
import io.swagger.model.ResponseMsg;
import io.swagger.model.SeasonsList;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-10-04T01:01:20.897Z[GMT]")
@Validated
public interface ResortsApi {

    @Operation(summary = "Add a new season for a resort", description = "", tags={ "resorts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "new season created"),
        
        @ApiResponse(responseCode = "400", description = "Invalid inputs", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseMsg.class))),
        
        @ApiResponse(responseCode = "404", description = "Resort not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseMsg.class))) })
    @RequestMapping(value = "/resorts/{resortID}/seasons",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addSeason(@Parameter(in = ParameterIn.PATH, description = "ID of the resort of interest", required=true, schema=@Schema()) @PathVariable("resortID") Integer resortID, @Parameter(in = ParameterIn.DEFAULT, description = "Specify new Season value", required=true, schema=@Schema()) @Valid @RequestBody ResortIDSeasonsBody body);


    @Operation(summary = "get a list of seasons for the specified resort", description = "", tags={ "resorts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SeasonsList.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Resort ID supplied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseMsg.class))),
        
        @ApiResponse(responseCode = "404", description = "Resort not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseMsg.class))) })
    @RequestMapping(value = "/resorts/{resortID}/seasons",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SeasonsList> getResortSeasons(@Parameter(in = ParameterIn.PATH, description = "ID of the resort of interest", required=true, schema=@Schema()) @PathVariable("resortID") Integer resortID);


    @Operation(summary = "get number of unique skiers at resort/season/day", description = "", tags={ "resorts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResortSkiers.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid Resort ID supplied", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseMsg.class))),
        
        @ApiResponse(responseCode = "404", description = "Resort not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseMsg.class))) })
    @RequestMapping(value = "/resorts/{resortID}/seasons/{seasonID}/day/{dayID}/skiers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResortSkiers> getResortSkiersDay(@Parameter(in = ParameterIn.PATH, description = "ID of the resort of interest", required=true, schema=@Schema()) @PathVariable("resortID") Integer resortID, @Parameter(in = ParameterIn.PATH, description = "ID of the resort of interest", required=true, schema=@Schema()) @PathVariable("seasonID") Integer seasonID, @Parameter(in = ParameterIn.PATH, description = "ID of the resort of interest", required=true, schema=@Schema()) @PathVariable("dayID") Integer dayID);


    @Operation(summary = "get a list of ski resorts in the database", description = "", tags={ "resorts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation, empty list returned if no data", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResortsList.class))) })
    @RequestMapping(value = "/resorts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ResortsList> getResorts();

}

